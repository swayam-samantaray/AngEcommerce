import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms'; // Required for ngModel
import { ProductService } from '../../services/product';
import { ProductModel } from '../../models/product.model';
import { CartService } from '../../services/cart';
import { RouterModule } from '@angular/router';

@Component({
  selector: 'app-product-list',
  imports: [CommonModule, FormsModule,RouterModule], // âœ… Required modules
  templateUrl: './product-list.html',
  styleUrls: ['./product-list.scss']
})
export class ProductList implements OnInit {
  products: ProductModel[] = [];
  filteredProducts: ProductModel[] = [];
  searchText = '';
  currentPage = 1;
  pageSize = 3;
  selectedCategory: string = 'All';
  maxPrice: number = 0;
  categories: string[] = []; // populated on init

  constructor(private productService: ProductService, private cartService: CartService) {}

  ngOnInit() {
    this.productService.getProducts().subscribe(data => {
      this.products = data;
      this.applyFilter();
    });

     // Get unique categories
    this.categories = Array.from(new Set(this.products.map(p => p.category)));

      // Optional: set maxPrice to max of all products
    this.maxPrice = Math.max(...this.products.map(p => p.price));
  }

  addToCart(product: ProductModel): void {
    this.cartService.addToCart(product);
    console.log('Added to cart:', product);
  }

  applyFilter() {
    const query = this.searchText.toLowerCase();
    this.filteredProducts = this.products.filter(p =>
    (p.name.toLowerCase().includes(query) || p.description.toLowerCase().includes(query)) &&
    (this.selectedCategory === 'All' || p.category === this.selectedCategory) &&
    (this.maxPrice === 0 || p.price <= this.maxPrice)
    );
    this.currentPage = 1;
  }

  get paginatedProducts(): ProductModel[] {
    const start = (this.currentPage - 1) * this.pageSize;
    return this.filteredProducts.slice(start, start + this.pageSize);
  }
  
  totalPages(): number {
    return Math.ceil(this.filteredProducts.length / this.pageSize);
  }

  goToPage(page: number): void {
    this.currentPage = page;
  }
  changePage(delta: number) {
    this.currentPage += delta;
  }

}
